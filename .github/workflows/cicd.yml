# This is a basic workflow to help you get started with Actions

name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
  workflow_dispatch:

jobs:
  
  build:
    runs-on: ubuntu-latest
    steps:
    
#     Checkout nodes, as in give access to your code 
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Test Coverage
      run: mvn -B test --file pom.xml
      
    - name: Package 
      run: mvn -B package --file pom.xml
    - name: Stamp artifact file name with commit hash
      run: |
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/.$commitHash.jar/g")
        mv $artifactName1 $artifactName2
    - uses: actions/upload-artifact@master
      with:
          name: artifacts
          path: target/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:    
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - uses: actions/download-artifact@master
      with:
        name: artifacts
        
    - name: Get branch name
      shell: bash
      id: get_branch_name
      run: |
          echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)">> $GITHUB_ENV
        
        
    - name: Print branch name
      shell: bash
      id: print_branch_name
      run: | 
        echo ${{env.BRANCH_NAME}}
        echo "$BRANCH_NAME"
        
 
    - name: Set runtime properties for develop branch
      id: set_runtime_properties_dev
      if: ${{ env.BRANCH_NAME == 'develop' }}
      # This is another way, where values are added as github env variables but this didnt work
      run: |
        echo "MULE_ENV=$(echo "DEV")">> $GITHUB_ENV
        echo "MULE_KEY=$(echo ${{secrets.MULE_KEY}})">> $GITHUB_ENV
        echo "DEPLOYMENT_ENV=$(echo "Development")">> $GITHUB_ENV
        echo "BUSINESS_GROUP_ID=$(echo ${{secrets.BUSINESS_GROUP_ID}})">> $GITHUB_ENV
        echo "ANYPOINT_PLATFORM_CLIENT_ID=$(echo ${{secrets.ANYPOINT_PLATFORM_CLIENT_ID_DEVELOP}})">> $GITHUB_ENV
        echo "ANYPOINT_PLATFORM_CLIENT_SECRET=$(echo ${{secrets.ANYPOINT_PLATFORM_CLIENT_SECRET_DEVELOP}})">> $GITHUB_ENV
        
    - name: Set runtime properties for QA branch
      id: set_runtime_properties_qa
      if: ${{ env.BRANCH_NAME == 'qa' }}
      run: |
        echo "MULE_ENV=$(echo "QA")">> $GITHUB_ENV
        echo "MULE_KEY=$(echo ${{secrets.MULE_KEY}})">> $GITHUB_ENV
        echo "DEPLOYMENT_ENV=$(echo "QA")">> $GITHUB_ENV
        echo "BUSINESS_GROUP_ID=$(echo ${{secrets.BUSINESS_GROUP_ID}})">> $GITHUB_ENV
        echo "ANYPOINT_PLATFORM_CLIENT_ID=$(echo ${{secrets.ANYPOINT_PLATFORM_CLIENT_ID_QA}})">> $GITHUB_ENV
        echo "ANYPOINT_PLATFORM_CLIENT_SECRET=$(echo ${{secrets.ANYPOINT_PLATFORM_CLIENT_SECRET_QA}})">> $GITHUB_ENV
    - name: Set runtime properties for PROD branch
      id: set_runtime_properties_main
      if: ${{ env.BRANCH_NAME == 'main' }}
      run: |
        echo "MULE_ENV=$(echo "PROD")">> $GITHUB_ENV
        echo "MULE_KEY=$(echo ${{secrets.MULE_KEY}})">> $GITHUB_ENV
        echo "DEPLOYMENT_ENV=$(echo "Production")">> $GITHUB_ENV
        echo "BUSINESS_GROUP_ID=$(echo ${{secrets.BUSINESS_GROUP_ID}})">> $GITHUB_ENV
        echo "ANYPOINT_PLATFORM_CLIENT_ID=$(echo ${{secrets.ANYPOINT_PLATFORM_CLIENT_ID_PROD}})">> $GITHUB_ENV
        echo "ANYPOINT_PLATFORM_CLIENT_SECRET=$(echo ${{secrets.ANYPOINT_PLATFORM_CLIENT_SECRET_PROD}})">> $GITHUB_ENV
      
    - name: Deploy to CloudHub
      if: ${{ steps.get_branch_name.outputs.BRANCH_NAME == 'main' }}
      env:
        USERNAME: ${{ secrets.ANYPOINT_USERNAME }}
        PASSWORD: ${{ secrets.ANYPOINT_PASSWORD }}
        MULE_ENV: ${{env.MULE_ENV}}
        MULE_KEY: ${{env.MULE_KEY}}
        DEPLOYMENT_ENV: ${{env.DEPLOYMENT_ENV}}
        BUSINESS_GROUP_ID: ${{env.BUSINESS_GROUP_ID}}
        ANYPOINT_PLATFORM_CLIENT_ID: ${{env.ANYPOINT_PLATFORM_CLIENT_ID}}
        ANYPOINT_PLATFORM_CLIENT_SECRET: ${{env.ANYPOINT_PLATFORM_CLIENT_ID}}
      run: |
         artifactName=$(ls *.jar | head -1)
          mvn mule:deploy -Dmule.artifact=$artifactName -Danypoint.username=${{ secrets.ANYPOINT_USERNAME }} -Danypoint.password=${{ secrets.ANYPOINT_PASSWORD }} -Danypoint.platform.client_id=${{secrets.ANYPOINT_PLATFORM_CLIENT_ID_PROD}} -Danypoint.platform.client_secret=${{secrets.ANYPOINT_PLATFORM_CLIENT_SECRET_PROD}} -Denvironment="Production" -Danypoint.env="PROD" -Danypoint.muleVersion=4.3.0 -Danypoint.region=us-east-1 -Danypoint.workers=1
          
